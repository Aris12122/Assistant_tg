import telebot
import logging
from config.config import TOKEN, ADMIN_IDS
from handlers import habit_handlers, reminder_handlers, stats_handlers
from database.db import get_or_create_user, add_habit, get_user_habits, get_session, get_habit_stats, delete_habit, add_test_completions
from utils.keyboards import get_frequency_keyboard, get_time_keyboard, get_habit_management_keyboard
from utils.scheduler import HabitScheduler
from database.classes import Habit
from sqlalchemy.orm import Session
import matplotlib.pyplot as plt
import io
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
bot = telebot.TeleBot(TOKEN)
scheduler = HabitScheduler(bot)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏
user_states = {}

# –ë–∞–∑–æ–≤—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    logging.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å ID: {user_id}")
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    get_or_create_user(message.from_user.id, message.from_user.username)
    
    bot.reply_to(message, 
        f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.full_name}</b>!\n"
        f"–í–∞—à Telegram ID: {user_id}\n"
        "–Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "/addhabit - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É\n"
        "/habits - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫\n"
        "/progress - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
        parse_mode='HTML'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏
@bot.message_handler(commands=['addhabit'])
def add_habit_start(message):
    user_states[message.from_user.id] = {'state': 'waiting_name'}
    bot.reply_to(message, "–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É! –ö–∞–∫ –Ω–∞–∑–æ–≤—ë–º?")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get('state') == 'waiting_name')
def handle_habit_name(message):
    user_states[message.from_user.id].update({
        'state': 'waiting_frequency',
        'name': message.text
    })
    bot.reply_to(message, 
        "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø—Ä–∏–≤—ã—á–∫–∏:",
        reply_markup=get_frequency_keyboard()
    )

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get('state') == 'waiting_frequency')
def handle_habit_frequency(message):
    if message.text not in ["–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", "–û—Ç–º–µ–Ω–∞"]:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    if message.text == "–û—Ç–º–µ–Ω–∞":
        del user_states[message.from_user.id]
        bot.reply_to(message, "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=telebot.types.ReplyKeyboardRemove())
        return

    user_states[message.from_user.id].update({
        'state': 'waiting_time',
        'frequency': message.text
    })
    bot.reply_to(message, 
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:",
        reply_markup=get_time_keyboard()
    )

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get('state') == 'waiting_time')
def handle_habit_time(message):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        del user_states[message.from_user.id]
        bot.reply_to(message, "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=telebot.types.ReplyKeyboardRemove())
        return

    state = user_states[message.from_user.id]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤—ã—á–∫—É –≤ –ë–î
    habit = add_habit(
        message.from_user.id,
        state['name'],
        state['frequency'],
        message.text
    )
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    scheduler.schedule_habit(habit)
    
    del user_states[message.from_user.id]
    
    bot.reply_to(message, 
        f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ '{state['name']}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n"
        f"üìÖ –ß–∞—Å—Ç–æ—Ç–∞: {state['frequency']}\n"
        f"‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {message.text}",
        reply_markup=telebot.types.ReplyKeyboardRemove()
    )

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫
@bot.message_handler(commands=['habits'])
def list_habits(message):
    habits = get_user_habits(message.from_user.id)
    
    if not habits:
        bot.reply_to(message, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫.")
        return
        
    for habit in habits:
        habit_text = (
            f"üî∑ <b>{habit.name}</b>\n"
            f"üìÖ –ß–∞—Å—Ç–æ—Ç–∞: {habit.frequency}\n"
            f"‚è∞ –í—Ä–µ–º—è: {habit.reminder_time}"
        )
        bot.send_message(
            message.chat.id,
            habit_text,
            parse_mode='HTML',
            reply_markup=get_habit_management_keyboard(habit.id)
        )

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback
@bot.callback_query_handler(func=lambda call: call.data.startswith('complete_'))
def complete_callback(call):
    reminder_handlers.handle_completion(bot, call)

@bot.callback_query_handler(func=lambda call: call.data.startswith('postpone_'))
def postpone_callback(call):
    reminder_handlers.handle_postpone(bot, call)

@bot.message_handler(commands=['help'])
def show_help(message):
    help_text = (
        "ü§ñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/addhabit - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É\n"
        "/habits - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫\n"
        "/progress - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏–≤—ã—á–µ–∫\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n"
        "1. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É –∫–æ–º–∞–Ω–¥–æ–π /addhabit\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        "3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        "4. –û—Ç–º–µ—á–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º\n"
        "5. –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–º–∞–Ω–¥–æ–π /progress"
    )
    bot.reply_to(message, help_text, parse_mode='HTML')

@bot.message_handler(commands=['progress'])
def show_progress(message):
    habits = get_user_habits(message.from_user.id)
    
    if not habits:
        bot.reply_to(message, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
        return

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_habits = len(habits)
    total_completions = 0
    current_streak = 0
    best_streak = 0

    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    plt.figure(figsize=(10, 6))
    plt.title("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π")
    
    for habit in habits:
        completions = get_habit_stats(habit.id)
        total_completions += len(completions)
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        dates = [c.completed_at.date() for c in completions]
        if dates:
            plt.plot(dates, [1] * len(dates), 'o', label=habit.name)

    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
    plt.legend()
    plt.grid(True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –≥—Ä–∞—Ñ–∏–∫
    stats_text = (
        "üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"üìù –í—Å–µ–≥–æ –ø—Ä–∏–≤—ã—á–µ–∫: {total_habits}\n"
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ä–∞–∑: {total_completions}\n"
        f"üî• –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {current_streak} –¥–Ω–µ–π\n"
        f"üèÜ –õ—É—á—à–∞—è —Å–µ—Ä–∏—è: {best_streak} –¥–Ω–µ–π\n\n"
        "–ì—Ä–∞—Ñ–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:"
    )
    
    bot.send_photo(
        message.chat.id,
        buf,
        caption=stats_text,
        parse_mode='HTML'
    )

# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_'))
def handle_delete_habit(call):
    habit_id = int(call.data.split('_')[1])
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{habit_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_delete_{habit_id}")
    )
    
    bot.edit_message_reply_markup(
        call.message.chat.id,
        call.message.message_id,
        reply_markup=keyboard
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_delete_'))
def handle_confirm_delete(call):
    habit_id = int(call.data.split('_')[2])
    
    if delete_habit(habit_id):
        # –û—Ç–º–µ–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        scheduler.stop_habit(habit_id)
        
        bot.edit_message_text(
            "‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞",
            call.message.chat.id,
            call.message.message_id
        )
    else:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏")

@bot.callback_query_handler(func=lambda call: call.data.startswith('cancel_delete_'))
def handle_cancel_delete(call):
    habit_id = int(call.data.split('_')[2])
    bot.edit_message_reply_markup(
        call.message.chat.id,
        call.message.message_id,
        reply_markup=get_habit_management_keyboard(habit_id)
    )

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ: –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    add_test_completions()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–∏–≤—ã—á–µ–∫
        session = get_session()
        habits = session.query(Habit).filter_by(is_active=True).all()
        for habit in habits:
            try:
                scheduler.schedule_habit(habit)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏ {habit.id}: {e}")
        session.close()
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        bot.infinity_polling()
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        scheduler.stop_all() 